{"version":3,"sources":["webpack:///node_modules/@capacitor/filesystem/dist/esm/web.js"],"names":["resolve","path","posix","split","filter","item","newPosix","forEach","length","pop","push","join","isPathParent","parent","children","pathsA","pathsB","every","value","index","FilesystemWeb","arguments","DB_VERSION","DB_NAME","_writeCmds","_db","undefined","window","unavailable","Promise","reject","request","indexedDB","open","onupgradeneeded","doUpgrade","onsuccess","result","onerror","error","onblocked","console","warn","cmd","args","readFlag","indexOf","initDb","then","conn","tx","transaction","store","objectStore","req","indexName","directory","uriPath","cleanedUriPath","replace","fsPath","clear","options","getPath","dbRequest","entry","Error","data","content","encoding","doRecursive","recursive","occupiedEntry","type","parentPath","substr","lastIndexOf","parentEntry","subDirIndex","parentArgPath","mkdir","isBase64String","now","Date","pathObj","folder","size","ctime","mtime","uri","btoa","atob","dbIndexRequest","IDBKeyRange","only","entries","depth","match","fullPath","readdir","readDirResult","files","entryPath","stat","entryObj","deleteFile","rmdir","all","map","e","subEntry","name","substring","_copy","publicStorage","doRename","toDirectory","to","from","fromDirectory","fromPath","toPath","toObj","toPathComponents","toParentDirectory","fromObj","updateTime","readFile","file","writeFile","writeResult","contents","filename","str","base64regex","test","event","eventTarget","target","db","oldVersion","objectStoreNames","contains","deleteObjectStore","createObjectStore","keyPath","createIndex","WebPlugin","_debug"],"mappings":"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","file":"node_modules_capacitor_filesystem_dist_esm_web_js-es5.js","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nfunction resolve(path) {\n    const posix = path.split('/').filter(item => item !== '.');\n    const newPosix = [];\n    posix.forEach(item => {\n        if (item === '..' &&\n            newPosix.length > 0 &&\n            newPosix[newPosix.length - 1] !== '..') {\n            newPosix.pop();\n        }\n        else {\n            newPosix.push(item);\n        }\n    });\n    return newPosix.join('/');\n}\nfunction isPathParent(parent, children) {\n    parent = resolve(parent);\n    children = resolve(children);\n    const pathsA = parent.split('/');\n    const pathsB = children.split('/');\n    return (parent !== children &&\n        pathsA.every((value, index) => value === pathsB[index]));\n}\nexport class FilesystemWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.DB_VERSION = 1;\n        this.DB_NAME = 'Disc';\n        this._writeCmds = ['add', 'put', 'delete'];\n    }\n    async initDb() {\n        if (this._db !== undefined) {\n            return this._db;\n        }\n        if (!('indexedDB' in window)) {\n            throw this.unavailable(\"This browser doesn't support IndexedDB\");\n        }\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n            request.onupgradeneeded = FilesystemWeb.doUpgrade;\n            request.onsuccess = () => {\n                this._db = request.result;\n                resolve(request.result);\n            };\n            request.onerror = () => reject(request.error);\n            request.onblocked = () => {\n                console.warn('db blocked');\n            };\n        });\n    }\n    static doUpgrade(event) {\n        const eventTarget = event.target;\n        const db = eventTarget.result;\n        switch (event.oldVersion) {\n            case 0:\n            case 1:\n            default: {\n                if (db.objectStoreNames.contains('FileStorage')) {\n                    db.deleteObjectStore('FileStorage');\n                }\n                const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n                store.createIndex('by_folder', 'folder');\n            }\n        }\n    }\n    async dbRequest(cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const req = store[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    async dbIndexRequest(indexName, cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const index = store.index(indexName);\n                const req = index[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    getPath(directory, uriPath) {\n        const cleanedUriPath = uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n        let fsPath = '';\n        if (directory !== undefined)\n            fsPath += '/' + directory;\n        if (uriPath !== '')\n            fsPath += '/' + cleanedUriPath;\n        return fsPath;\n    }\n    async clear() {\n        const conn = await this.initDb();\n        const tx = conn.transaction(['FileStorage'], 'readwrite');\n        const store = tx.objectStore('FileStorage');\n        store.clear();\n    }\n    /**\n     * Read a file from disk\n     * @param options options for the file read\n     * @return a promise that resolves with the read file data result\n     */\n    async readFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        // const encoding = options.encoding;\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        return { data: entry.content ? entry.content : '' };\n    }\n    /**\n     * Write a file to disk in the specified location on device\n     * @param options options for the file write\n     * @return a promise that resolves with the file write result\n     */\n    async writeFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const doRecursive = options.recursive;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: doRecursive,\n                });\n            }\n        }\n        if (!encoding) {\n            data = data.indexOf(',') >= 0 ? data.split(',')[1] : data;\n            if (!this.isBase64String(data))\n                throw Error('The supplied data is not valid base64 content.');\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: now,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n        return {\n            uri: pathObj.path,\n        };\n    }\n    /**\n     * Append to a file on disk in the specified location on device\n     * @param options options for the file append\n     * @return a promise that resolves with the file write result\n     */\n    async appendFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const now = Date.now();\n        let ctime = now;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: true,\n                });\n            }\n        }\n        if (!encoding && !this.isBase64String(data))\n            throw Error('The supplied data is not valid base64 content.');\n        if (occupiedEntry !== undefined) {\n            if (occupiedEntry.content !== undefined && !encoding) {\n                data = btoa(atob(occupiedEntry.content) + atob(data));\n            }\n            else {\n                data = occupiedEntry.content + data;\n            }\n            ctime = occupiedEntry.ctime;\n        }\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: ctime,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Delete a file from disk\n     * @param options options for the file delete\n     * @return a promise that resolves with the deleted file data result\n     */\n    async deleteFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n            IDBKeyRange.only(path),\n        ]);\n        if (entries.length !== 0)\n            throw Error('Folder is not empty.');\n        await this.dbRequest('delete', [path]);\n    }\n    /**\n     * Create a directory.\n     * @param options options for the mkdir\n     * @return a promise that resolves with the mkdir result\n     */\n    async mkdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const doRecursive = options.recursive;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const depth = (path.match(/\\//g) || []).length;\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (depth === 1)\n            throw Error('Cannot create Root directory');\n        if (occupiedEntry !== undefined)\n            throw Error('Current directory does already exist.');\n        if (!doRecursive && depth !== 2 && parentEntry === undefined)\n            throw Error('Parent directory must exist');\n        if (doRecursive && depth !== 2 && parentEntry === undefined) {\n            const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n            await this.mkdir({\n                path: parentArgPath,\n                directory: options.directory,\n                recursive: doRecursive,\n            });\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'directory',\n            size: 0,\n            ctime: now,\n            mtime: now,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Remove a directory\n     * @param options the options for the directory remove\n     */\n    async rmdir(options) {\n        const { path, directory, recursive } = options;\n        const fullPath = this.getPath(directory, path);\n        const entry = (await this.dbRequest('get', [fullPath]));\n        if (entry === undefined)\n            throw Error('Folder does not exist.');\n        if (entry.type !== 'directory')\n            throw Error('Requested path is not a directory');\n        const readDirResult = await this.readdir({ path, directory });\n        if (readDirResult.files.length !== 0 && !recursive)\n            throw Error('Folder is not empty');\n        for (const entry of readDirResult.files) {\n            const entryPath = `${path}/${entry}`;\n            const entryObj = await this.stat({ path: entryPath, directory });\n            if (entryObj.type === 'file') {\n                await this.deleteFile({ path: entryPath, directory });\n            }\n            else {\n                await this.rmdir({ path: entryPath, directory, recursive });\n            }\n        }\n        await this.dbRequest('delete', [fullPath]);\n    }\n    /**\n     * Return a list of files from the directory (not recursive)\n     * @param options the options for the readdir operation\n     * @return a promise that resolves with the readdir directory listing result\n     */\n    async readdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (options.path !== '' && entry === undefined)\n            throw Error('Folder does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);\n        const files = await Promise.all(entries.map(async (e) => {\n            let subEntry = (await this.dbRequest('get', [e]));\n            if (subEntry === undefined) {\n                subEntry = (await this.dbRequest('get', [e + '/']));\n            }\n            return {\n                name: e.substring(path.length + 1),\n                type: subEntry.type,\n                size: subEntry.size,\n                ctime: subEntry.ctime,\n                mtime: subEntry.mtime,\n                uri: subEntry.path,\n            };\n        }));\n        return { files: files };\n    }\n    /**\n     * Return full File URI for a path and directory\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async getUri(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        return {\n            uri: (entry === null || entry === void 0 ? void 0 : entry.path) || path,\n        };\n    }\n    /**\n     * Return data about a file\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async stat(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        if (entry === undefined)\n            throw Error('Entry does not exist.');\n        return {\n            type: entry.type,\n            size: entry.size,\n            ctime: entry.ctime,\n            mtime: entry.mtime,\n            uri: entry.path,\n        };\n    }\n    /**\n     * Rename a file or directory\n     * @param options the options for the rename operation\n     * @return a promise that resolves with the rename result\n     */\n    async rename(options) {\n        await this._copy(options, true);\n        return;\n    }\n    /**\n     * Copy a file or directory\n     * @param options the options for the copy operation\n     * @return a promise that resolves with the copy result\n     */\n    async copy(options) {\n        return this._copy(options, false);\n    }\n    async requestPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    async checkPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    /**\n     * Function that can perform a copy or a rename\n     * @param options the options for the rename operation\n     * @param doRename whether to perform a rename or copy operation\n     * @return a promise that resolves with the result\n     */\n    async _copy(options, doRename = false) {\n        let { toDirectory } = options;\n        const { to, from, directory: fromDirectory } = options;\n        if (!to || !from) {\n            throw Error('Both to and from must be provided');\n        }\n        // If no \"to\" directory is provided, use the \"from\" directory\n        if (!toDirectory) {\n            toDirectory = fromDirectory;\n        }\n        const fromPath = this.getPath(fromDirectory, from);\n        const toPath = this.getPath(toDirectory, to);\n        // Test that the \"to\" and \"from\" locations are different\n        if (fromPath === toPath) {\n            return {\n                uri: toPath,\n            };\n        }\n        if (isPathParent(fromPath, toPath)) {\n            throw Error('To path cannot contain the from path');\n        }\n        // Check the state of the \"to\" location\n        let toObj;\n        try {\n            toObj = await this.stat({\n                path: to,\n                directory: toDirectory,\n            });\n        }\n        catch (e) {\n            // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n            const toPathComponents = to.split('/');\n            toPathComponents.pop();\n            const toPath = toPathComponents.join('/');\n            // Check the containing directory of the \"to\" location exists\n            if (toPathComponents.length > 0) {\n                const toParentDirectory = await this.stat({\n                    path: toPath,\n                    directory: toDirectory,\n                });\n                if (toParentDirectory.type !== 'directory') {\n                    throw new Error('Parent directory of the to path is a file');\n                }\n            }\n        }\n        // Cannot overwrite a directory\n        if (toObj && toObj.type === 'directory') {\n            throw new Error('Cannot overwrite a directory with a file');\n        }\n        // Ensure the \"from\" object exists\n        const fromObj = await this.stat({\n            path: from,\n            directory: fromDirectory,\n        });\n        // Set the mtime/ctime of the supplied path\n        const updateTime = async (path, ctime, mtime) => {\n            const fullPath = this.getPath(toDirectory, path);\n            const entry = (await this.dbRequest('get', [fullPath]));\n            entry.ctime = ctime;\n            entry.mtime = mtime;\n            await this.dbRequest('put', [entry]);\n        };\n        const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n        switch (fromObj.type) {\n            // The \"from\" object is a file\n            case 'file': {\n                // Read the file\n                const file = await this.readFile({\n                    path: from,\n                    directory: fromDirectory,\n                });\n                // Optionally remove the file\n                if (doRename) {\n                    await this.deleteFile({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n                // Write the file to the new location\n                const writeResult = await this.writeFile({\n                    path: to,\n                    directory: toDirectory,\n                    data: file.data,\n                });\n                // Copy the mtime/ctime of a renamed file\n                if (doRename) {\n                    await updateTime(to, ctime, fromObj.mtime);\n                }\n                // Resolve promise\n                return writeResult;\n            }\n            case 'directory': {\n                if (toObj) {\n                    throw Error('Cannot move a directory over an existing object');\n                }\n                try {\n                    // Create the to directory\n                    await this.mkdir({\n                        path: to,\n                        directory: toDirectory,\n                        recursive: false,\n                    });\n                    // Copy the mtime/ctime of a renamed directory\n                    if (doRename) {\n                        await updateTime(to, ctime, fromObj.mtime);\n                    }\n                }\n                catch (e) {\n                    // ignore\n                }\n                // Iterate over the contents of the from location\n                const contents = (await this.readdir({\n                    path: from,\n                    directory: fromDirectory,\n                })).files;\n                for (const filename of contents) {\n                    // Move item from the from directory to the to directory\n                    await this._copy({\n                        from: `${from}/${filename}`,\n                        to: `${to}/${filename}`,\n                        directory: fromDirectory,\n                        toDirectory,\n                    }, doRename);\n                }\n                // Optionally remove the original from directory\n                if (doRename) {\n                    await this.rmdir({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n            }\n        }\n        return {\n            uri: toPath,\n        };\n    }\n    isBase64String(str) {\n        const base64regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n        return base64regex.test(str);\n    }\n}\nFilesystemWeb._debug = true;\n//# sourceMappingURL=web.js.map"]}